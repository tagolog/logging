with insertedMessageId as
(
  insert into Log.Message(
      CustomerId,
      ApplicationId,
      LevelId,
      Created,
      Logged,
	  CreatedTicks,
      CorrelationId,
	  LogUserIdentity,
      LogIPAddress,
      RequestIPAddress,
      MessageText,
      ExceptionText,
      PacketLength,
	  SphinxTagsText )
    select
      @customerId as CustomerId,
      @applicationId as ApplicationId,
      @logLevelId as LevelId,
      @created as Created,
      @logged as Logged,
	  @createdTicks as CreatedTicks,
      @correlationId as CorrelationId,
	  @logUserIdentity as LogUserIdentity,
      @logIPAddress as LogIPAddress,
      @requestIPAddress as RequestIPAddress,
      @messageText as MessageText,
      @exceptionText as ExceptionText,
      @packetLength as PacketLength,
	  @SphinxTagsText as SphinxTagsText
  returning MessageId
)
insert into Log.MessageTag
(
  MessageId,
  TagId,
  CustomerId,
  TagValue
)
select
    MessageId,
    tag.Id as TagId,
    @customerId as CustomerId,
    tag.Value as TagValue
  from insertedMessageId,
  (
    select
        dbTag.TagId as Id,
        logEntryTag.Value as Value
      from Log.Tag as dbTag
      join
      (
        {logEntryTags_UnionAll}
      ) as logEntryTag
      on
        dbTag.Code = logEntryTag.Code
      where
        dbTag.CustomerId = @customerId
  ) as tag
